@model (string, IEnumerable<Type>)
@using Infobase.Automation
@using System.Reflection
@{
    string dataset = Model.Item1;
    IEnumerable<Type> models = Model.Item2;
}
// This file was written by a tool
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Infobase.Models.@(dataset);

namespace Infobase.Models
{
    public class @(dataset)Context : DbContext
    {
        public @(dataset)Context(DbContextOptions<@(dataset)Context> options): base(options) { }
        public DbSet<Master> Master { get; set; }
@foreach (Type m in models) {
        @:public DbSet<@m.Name> @m.Name { get; set; }
}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // AutoIncrement the indexes
            modelBuilder.ForNpgsqlUseIdentityColumns();
            /* Make the Indexes unique. Conflcits must FAIL. */
@foreach (Type m in models) {
            @:modelBuilder.Entity<@m.Name>().HasAlternateKey(entity => entity.Index);
}
        }
    }

    public class Master {
        
        public bool Aggregator { get; set; }
        public bool Included { get; set; }
        public double? CVWarnAt { get; set; }
        public double? CVSuppressAt { get; set; }
        public double? ValueAverage { get; set; }
        public double? ValueUpper { get; set; }
        public double? ValueLower { get; set; }
        public int CVInterpretation { get; set; }
        public int? CVValue { get; set; }
        public int Type { get; set; }
@foreach (Type m in models) {
    var textDataAttributes = m.GetCustomAttributes<TextData>();
    
    @foreach (var textDataAttribute in textDataAttributes) {
        @:public string @(m.Name)@(textDataAttribute.Name)En { get; set; }
    }

}
    }
}