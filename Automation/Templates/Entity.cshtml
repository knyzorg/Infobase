@model Type
@using Infobase.Automation
@using System.Reflection
@using System.Collections.ObjectModel
@using Pluralize.NET;

@{
    var childAttribute = Model.GetCustomAttribute<ChildOf>();
    var parentAttribute = Model.GetCustomAttribute<ParentOf>();
    var textDataAttributes = Model.GetCustomAttributes<TextData>();
    var modifierAttribute = Model.GetCustomAttribute<Modifier>();
}
// This file was written by a tool
// Changes done to anything other than automation attributes will be overwritten

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;
using Infobase.Automation;

namespace @Model.Namespace {

@foreach (var textAttribute in textDataAttributes) {
    @:[TextData("@textAttribute.Name")]
}
@{
        var modifiers = new Collection<string>();  
        if (modifierAttribute != null) {  
            if (modifierAttribute.Modifiers.HasFlag(ModelModifier.Aggregator)) {
                modifiers.Add("ModelModifier.Aggregator");
            }
            if (modifierAttribute.Modifiers.HasFlag(ModelModifier.CVBoundries)) {
                modifiers.Add("ModelModifier.CVBoundries");
            }
            if (modifierAttribute.Modifiers.HasFlag(ModelModifier.Data)) {
                modifiers.Add("ModelModifier.Data");
            }
            if (modifierAttribute.Modifiers.HasFlag(ModelModifier.Include)) {
                modifiers.Add("ModelModifier.Include");
            }
        }
}
@if (modifiers.Count > 0) {
    @:[Modifier(@String.Join(" | ", modifiers.ToArray()))]
}
@if (childAttribute != null) {
    @:[ChildOf(typeof(@childAttribute.Parent.Name))]
}
@if (parentAttribute != null) {
    @:[ParentOf(typeof(@parentAttribute.Child.Name), @(parentAttribute.IncludeDefault ? "true" : "false"))]
}
    public class @Model.Name
    {
        public int @(Model.Name)Id { get; set; }
        public int Index { get; set; }
@if (modifierAttribute != null) {  
    if (modifierAttribute.Modifiers.HasFlag(ModelModifier.Aggregator)) {
        @:public bool Aggregator { get; set; }
    }
    if (modifierAttribute.Modifiers.HasFlag(ModelModifier.CVBoundries)) {
        @:public double? ValueAverage { get; set; }
        @:public double? ValueUpper { get; set; }
        @:public double? ValueLower { get; set; }
        @:public int CVInterpretation { get; set; }
        @:public int? CVValue { get; set; }
        @:public int Type { get; set; }
    }
    if (modifierAttribute.Modifiers.HasFlag(ModelModifier.Data)) {
        @:public double? CVWarnAt { get; set; }
        @:public double? CVSuppressAt { get; set; }
    }
    if (modifierAttribute.Modifiers.HasFlag(ModelModifier.Include)) {
        @:public bool Included { get; set; }
    }
}

@foreach (var textAttribute in textDataAttributes) {
        @:public string @(Model.Name)@(textAttribute.Name)(string culture) {
            @:switch (culture) {
                @:case "en-ca": return @(Model.Name)@(textAttribute.Name)En;
                @:case "fr-ca": return @(Model.Name)@(textAttribute.Name)Fr;
            @:}
            @:return "No culture";
        @:}
        @:public string @(Model.Name)@(textAttribute.Name)En { get; set; }
        @:public string @(Model.Name)@(textAttribute.Name)Fr { get; set; }
}

@if (childAttribute != null) {
        @:public int @(childAttribute.Parent.Name)Id { get; set; }
        @:public virtual @(childAttribute.Parent.Name) @(childAttribute.Parent.Name) { get; set; }
}

@if (parentAttribute != null) {        
        @:[InverseProperty("@Model.Name")]
        @:public virtual ICollection<@(parentAttribute.Child.Name)> @(new Pluralizer().Pluralize(parentAttribute.Child.Name)) { get; set; }
    if (parentAttribute.IncludeDefault) {
        @:public int? Default@(parentAttribute.Child.Name)Id { get; set; }
        @:[ForeignKey("Default@(parentAttribute.Child.Name)Id")]
        @:public virtual @(parentAttribute.Child.Name) Default@(parentAttribute.Child.Name) { get; set; }    
    }
}
    }
}